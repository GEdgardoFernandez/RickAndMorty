{"ast":null,"code":"import { ADD_FAV, REMOVE_FAV, FILTER, ORDER, GET_CHARACTER_DETAILS } from \"./Actions\";\nconst initialState = {\n  myFavorites: [],\n  characterDetail: {},\n  allCharacters: []\n};\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_FAV:\n      // Verificar si el personaje ya está en favoritos para evitar duplicados\n      if (state.myFavorites.find(character => character.id === action.payload.id)) {\n        return state;\n      }\n      // Agregar el nuevo favorito a myFavorites\n      return {\n        ...state,\n        myFavorites: [...state.myFavorites, action.payload]\n      };\n    case REMOVE_FAV:\n      // Filtrar los favoritos para eliminar el personaje con la ID correspondiente\n      const filteredFavorites = state.myFavorites.filter(fav => fav.id !== Number(action.payload));\n      return {\n        ...state,\n        myFavorites: filteredFavorites\n      };\n    case GET_CHARACTER_DETAILS:\n      // Agregar el personaje detallado a myFavorites\n      return {\n        ...state,\n        characterDetail: action.payload\n      };\n    case FILTER:\n      // Filtra los personajes por género\n      const filteredCharacters = state.allCharacters.filter(character => character.gender === action.payload);\n      return {\n        ...state,\n        allCharacters: filteredCharacters // Actualiza allCharacters con los personajes filtrados\n      };\n    case ORDER:\n      // Ordenar los personajes y almacenarlos en myFavorites\n      const sortedCharacters = [...state.myFavorites].sort((a, b) => {\n        if (action.payload === 'A') {\n          return a.id - b.id;\n        } else if (action.payload === 'D') {\n          return b.id - a.id;\n        }\n      });\n      return {\n        ...state,\n        myFavorites: sortedCharacters\n      };\n    default:\n      return state;\n  }\n}\nexport default reducer;","map":{"version":3,"names":["ADD_FAV","REMOVE_FAV","FILTER","ORDER","GET_CHARACTER_DETAILS","initialState","myFavorites","characterDetail","allCharacters","reducer","state","action","type","find","character","id","payload","filteredFavorites","filter","fav","Number","filteredCharacters","gender","sortedCharacters","sort","a","b"],"sources":["C:/Users/bff08/Desktop/ProyectoRickandMorty/rick_and_morty/src/Redux/reducer.js"],"sourcesContent":["import { ADD_FAV, REMOVE_FAV, FILTER, ORDER, GET_CHARACTER_DETAILS } from \"./Actions\";\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    characterDetail: {},\r\n    allCharacters: []\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_FAV:\r\n            // Verificar si el personaje ya está en favoritos para evitar duplicados\r\n            if (state.myFavorites.find(character => character.id === action.payload.id)) {\r\n                return state;\r\n            }\r\n            // Agregar el nuevo favorito a myFavorites\r\n            return {\r\n                ...state,\r\n                myFavorites: [...state.myFavorites, action.payload]\r\n            };\r\n        case REMOVE_FAV:\r\n            // Filtrar los favoritos para eliminar el personaje con la ID correspondiente\r\n            const filteredFavorites = state.myFavorites.filter((fav) => fav.id !== Number(action.payload));\r\n            return {\r\n                ...state,\r\n                myFavorites: filteredFavorites\r\n            };\r\n        case GET_CHARACTER_DETAILS:\r\n            // Agregar el personaje detallado a myFavorites\r\n            return {\r\n                ...state,\r\n                characterDetail: action.payload\r\n            };\r\n            case FILTER:\r\n                // Filtra los personajes por género\r\n                const filteredCharacters = state.allCharacters.filter(character => character.gender === action.payload);\r\n                return {\r\n                  ...state,\r\n                  allCharacters: filteredCharacters // Actualiza allCharacters con los personajes filtrados\r\n                };\r\n        case ORDER:\r\n            // Ordenar los personajes y almacenarlos en myFavorites\r\n            const sortedCharacters = [...state.myFavorites].sort((a, b) => {\r\n                if (action.payload === 'A') {\r\n                    return a.id - b.id;\r\n                } else if (action.payload === 'D') {\r\n                    return b.id - a.id;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                myFavorites: sortedCharacters\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,qBAAqB,QAAQ,WAAW;AAErF,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,eAAe,EAAE,CAAC,CAAC;EACnBC,aAAa,EAAE;AACnB,CAAC;AAED,SAASC,OAAOA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,EAAE;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKZ,OAAO;MACR;MACA,IAAIU,KAAK,CAACJ,WAAW,CAACO,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC,EAAE;QACzE,OAAOL,KAAK;MAChB;MACA;MACA,OAAO;QACH,GAAGA,KAAK;QACRJ,WAAW,EAAE,CAAC,GAAGI,KAAK,CAACJ,WAAW,EAAEK,MAAM,CAACK,OAAO;MACtD,CAAC;IACL,KAAKf,UAAU;MACX;MACA,MAAMgB,iBAAiB,GAAGP,KAAK,CAACJ,WAAW,CAACY,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACJ,EAAE,KAAKK,MAAM,CAACT,MAAM,CAACK,OAAO,CAAC,CAAC;MAC9F,OAAO;QACH,GAAGN,KAAK;QACRJ,WAAW,EAAEW;MACjB,CAAC;IACL,KAAKb,qBAAqB;MACtB;MACA,OAAO;QACH,GAAGM,KAAK;QACRH,eAAe,EAAEI,MAAM,CAACK;MAC5B,CAAC;IACD,KAAKd,MAAM;MACP;MACA,MAAMmB,kBAAkB,GAAGX,KAAK,CAACF,aAAa,CAACU,MAAM,CAACJ,SAAS,IAAIA,SAAS,CAACQ,MAAM,KAAKX,MAAM,CAACK,OAAO,CAAC;MACvG,OAAO;QACL,GAAGN,KAAK;QACRF,aAAa,EAAEa,kBAAkB,CAAC;MACpC,CAAC;IACT,KAAKlB,KAAK;MACN;MACA,MAAMoB,gBAAgB,GAAG,CAAC,GAAGb,KAAK,CAACJ,WAAW,CAAC,CAACkB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC3D,IAAIf,MAAM,CAACK,OAAO,KAAK,GAAG,EAAE;UACxB,OAAOS,CAAC,CAACV,EAAE,GAAGW,CAAC,CAACX,EAAE;QACtB,CAAC,MAAM,IAAIJ,MAAM,CAACK,OAAO,KAAK,GAAG,EAAE;UAC/B,OAAOU,CAAC,CAACX,EAAE,GAAGU,CAAC,CAACV,EAAE;QACtB;MACJ,CAAC,CAAC;MACF,OAAO;QACH,GAAGL,KAAK;QACRJ,WAAW,EAAEiB;MACjB,CAAC;IACL;MACI,OAAOb,KAAK;EACpB;AACJ;AAEA,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}